global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet c "Code"
\\code{$1}$0
endsnippet

snippet col "Collection" i
^{($1)}$0
endsnippet

context "math()"
snippet Ra "Rightarrow" i
\\Rightarrow $0
endsnippet

snippet sqt "Squareroot" i
\\sqrt{$1}$0
endsnippet

snippet ip "Inner Product" i
\\innerp{$1}{$2}$0
endsnippet

snippet align* "Un-numbered align environment" i
\\begin{align*}
	$1
\\end{align*} $0
endsnippet

snippet itemize "Itemize environment" bi
\\begin{itemize}
	\item $1
\\end{itemize} $0
endsnippet

snippet bin "Binomial coefficient" i
\\binom{$1}{$2}
endsnippet

snippet tag "Tag"
\\tag*{$1}$0
endsnippet

snippet induct "Induction Format" bi
\\begin{itemize}
	\\item (Base Case) $1
	\\item (Induction Step) $0
\\end{itemize}
endsnippet

snippet mat "Matrix"
\\begin{$1matrix}
	$0
\\end{$1matrix}
endsnippet

snippet Sum "Summation" i
\sum_{i = $1}^{$2}$0
endsnippet

snippet td "Superscript" iA
^{$1}$0
endsnippet

priority 100
snippet item "Item"
\item
endsnippet

priority 10
snippet cos "Cosine" i
\\cos$1($2)$0
endsnippet

priority 10
snippet sin "Sine" i
\\sin$1($2)$0
endsnippet

priority 10
snippet int "Integral" i
\\int_{$1}^{$2} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

snippet _ "Subscript" i
_{$1}$0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
\] $0
endsnippet

snippet set "Set" i
\\{$1\\}$0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet 'mat_(.+\.)+?\.?' "Matrix" r
\\begin{$1matrix}
`!p
entries = match.group(1)
indent = re.search(r'^( *)', match.string).group(1)
lines = [e for e in entries.split('..') if e]
formatted_lines = []
for line in lines:
  nums = [e for e in line.split('.') if e]
  if line == lines[0]: formatted_lines.append('  ' + ' & '.join(nums))
  else: formatted_lines.append(indent + '  ' + ' & '.join(nums))
snip.rv = ' \\\\\n'.join(formatted_lines)
`
\\end{$1matrix} $0
endsnippet

priority 10
snippet "over" "bar" i
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" ri
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Bold" riA
\mathbf{`!p snip.rv=match.group(1)`}
endsnippet

snippet sympy "sympy block" w
sympy $1 sympy$0
endsnippet

snippet eps "epsilon" i
\varepsilon
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
